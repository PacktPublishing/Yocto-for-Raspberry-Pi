#!/usr/bin/env node

/*
 * bin/udoo
 */

'use strict';

var assert = require('assert'),
    path = require('path'),
    util = require('util');

require('colors');

var _ = require('lodash'),
    pkg = require('../package'),
    udoo = require('..');

var BLINK_INTERVAL = 300;

var COMMANDS = [
  'blink',
  'help',
  'high',
  'low',
  'reset'
];

var PROGRAM = path.basename(process.argv[1]);

function _checkInvalidPinNames(pinNames) {
  var invalidPins = _.difference(pinNames, udoo.pinNames());

  if (!_.isEmpty(invalidPins)) {
    console.error(util.format(
      'Error: Invalid pin names - %s',
      invalidPins.join(', ')
    ).red);
    process.exit(1);
  }
}

exports.blink = function (args) {
  _checkInvalidPinNames(args);

  var leds = [],
      on = false;

  (_.isEmpty(args) ? udoo.pinNames() : args).forEach(function (pinName) {
    leds.push(udoo.outputPin(pinName));
  });

  setInterval(function () {
    on = !on;
    leds.map(function (led, cb) {
      led.set(on, cb);
    }, function (err) {
      if (err) {
        console.error('Error: %s', err.message);
        return process.exit(1);
      }
    });
  }, BLINK_INTERVAL);
};

exports.help = function (args) {
  var command = (args || [])[0];

  switch (command) {
  case 'blink':
    console.error('Usage:');
    console.error();
    console.error('%s blink', PROGRAM);
    console.error('%s blink <pinName> [<pinName> ...]', PROGRAM);
    break;
  case 'help':
    console.error('Usage:');
    console.error();
    console.error('%s help', PROGRAM);
    console.error('%s help <command>', PROGRAM);
    break;
  case 'high':
    console.error('Usage:');
    console.error();
    console.error('%s high', PROGRAM);
    console.error('%s high <pinName> [<pinName> ...]', PROGRAM);
    break;
  case 'low':
    console.error('Usage:');
    console.error();
    console.error('%s low', PROGRAM);
    console.error('%s low <pinName> [<pinName> ...]', PROGRAM);
    break;
  case 'reset':
    console.error('Usage:');
    console.error();
    console.error('%s reset', PROGRAM);
    console.error('%s reset <pinName> [<pinName> ...]', PROGRAM);
    break;
  default:
    console.error('Usage: %s <command>', PROGRAM);
    console.error();
    console.error('where <command> is one of:');
    _.each(COMMANDS, function (command) {
      if (command === 'high') {
        command = 'high/on/1';
      } else if (command === 'low') {
        command = 'low/off/0';
      }
      console.error('    %s', command);
    });
    break;
  }

  console.error();
  console.error('[options]');
  console.error('    -h                quick help on command (--help)');
  console.error();
  console.error(util.format('%s@%s: %s', pkg.name, pkg.version, process.argv[1]).grey);
  console.error('node-udoo: https://github.com/pilwon/node-udoo'.grey);

  process.exit(1);
};

exports.high = function (args) {
  _checkInvalidPinNames(args);

  (_.isEmpty(args) ? udoo.pinNames() : args).map(function (pinName, cb) {
    udoo.outputPin(pinName).setHigh(cb);
  }, function (err) {
    if (err) { throw err; }
  });
};

exports.low = function (args) {
  _checkInvalidPinNames(args);

  (_.isEmpty(args) ? udoo.pinNames() : args).map(function (pinName, cb) {
    udoo.outputPin(pinName).setLow(cb);
  }, function (err) {
    if (err) { throw err; }
  });
};

exports.reset = function (args) {
  if (_.isEmpty(args)) {
    return udoo.reset().done();
  }

  var invalidPins = _.difference(args, udoo.pinNames());
  if (!_.isEmpty(invalidPins)) {
    return console.error(util.format(
      'Error: Invalid pin names - %s',
      invalidPins.join(', ')
    ).red);
  }

  udoo.async.map(args, function (pinName, cb) {
    udoo.inputPin(pinName).reset(cb);
  }, function (err) {
    if (err) { throw err; }
  });
};

exports.main = function () {
  var args = process.argv.slice(2),
      i;

  // Parse version option.
  if (_.contains(args, '-v') || _.contains(args, '--version')) {
    return console.log(pkg.version);
  }

  // Parse help option.
  if (_.contains(args, '-h') || _.contains(args, '--help')) {
    return exports.help(_.difference(args, ['-h', '--help']));
  }

  // Parse command & command args.
  var command = args[0],
      commandArgs = args.slice(1);

  // Handle empty command.
  if (_.isEmpty(command)) {
    return exports.help();
  }

  // Command aliases.
  if (_.contains(['0', 'off'], command)) {
    command = 'low';
  } else if (_.contains(['1', 'on'], command)) {
    command = 'high';
  }

  // Handle invalid command.
  if (!_.contains(COMMANDS, command)) {
    console.error(util.format('Error: Invalid command - %s', command).red);
    console.error();

    return exports.help();
  }

  // Execute command.
  assert(_.isFunction(exports[command]), 'Not yet implemented: ' + command);
  process.title = util.format('%s %s %s', PROGRAM, command, commandArgs.join(' '));
  exports[command](commandArgs);
};

if (require.main === module) {
  exports.main();
}
