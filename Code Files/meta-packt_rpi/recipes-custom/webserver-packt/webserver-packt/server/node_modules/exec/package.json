{
  "name": "exec",
  "description": "Call a child process with the ease of exec and safety of spawn",
  "author": {
    "name": "Dave Eddy",
    "email": "dave@daveeddy.com",
    "url": "http://www.daveeddy.com"
  },
  "version": "0.1.2",
  "repository": {
    "url": "https://github.com/bahamas10/node-exec.git",
    "type": "git"
  },
  "main": "exec.js",
  "scripts": {
    "test": "for f in examples/*.js; do echo \"$f\"; node \"$f\" || exit 1; echo; done; echo 'Passed'"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "bin": {},
  "engines": {
    "node": ">= v0.8.0"
  },
  "keywords": [
    "exec",
    "spawn",
    "child",
    "wordsplitting",
    "shell"
  ],
  "readme": "exec\n====\n\nCall a child process with the ease of exec and safety of spawn\n\n\n**Note:** The API has changed slightly with `v0.1.0` of this module\n\n**UPDATE:** If your version of node supports `child_process.execFile`, consider\nusing that instead, as that does everything this module does and more... the usage\nis slightly different.\n\n[http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback]\n(http://nodejs.org/api/child_process.html#child_process_child_process_execfile_file_args_options_callback)\n\nWhy?\n----\n\nThis module provides the best of both worlds of `spawn` and `exec`\n\nIt will callback with 2 strings containing stdout and stderr\n(like `child_process.exec`), but will take an array of process arguments\n(like `child_process.spawn`) to avoid any potentially harmful shell expansion.\n\nUsage\n-----\n\n``` js\nvar exec = require('exec');\n```\n\nExample\n-------\n\n``` js\nvar exec = require('exec');\n\nexec(['ls', '-lha'], function(err, out, code) {\n  if (err instanceof Error)\n    throw err;\n  process.stderr.write(err);\n  process.stdout.write(out);\n  process.exit(code);\n});\n```\n\nThe example above will call `ls -lha` safely, by passing the arguments directly\nto `exec(2)` without using an shell expansion/word splitting.\n\nIt returns a `child_process.spawn` object, and callbacks with any stdout,\nstderr, and the exit status of the command.  The above example will throw an\nerror if anything went wrong during the spawn, otherwise it will print the stdout,\nstderr, and exit with the exit code of `ls`.\n\n**NOTE:** If `err` is an instanceof `Error`, it means that `child_process.spawn` emitted\nand `error` event, and `err` is set to that error object.\n\n`err` and `out` are encoded as`utf-8` strings by default\n\nFor backwards compatibility with `child_process.exec`, it is also possible\nto pass a string to `exec`.  The string will automatically be converted to\n`['/bin/sh', '-c', '{string}']`, which will cause the string to be parsed on the\nshell.  Note that if you use this method, you are at risk of shell expansion,\nword splitting, and other shell features that could be potentially unsafe.\n\n``` js\nexec('cat foo | grep bar', function(err, out, code) {\n  if (err instanceof Error)\n    throw err;\n  process.stderr.write(err);\n  process.stdout.write(out);\n  process.exit(code);\n});\n```\n\nFunctions\n---------\n\n### exec(['args'], [opts], callback)\n\n- `args`: an array of arguments to execute\n- `opts`: is additional options to pass to `child_process.spawn`\n\nIn addition to the `child_process.spawn` options, more options have been added to mimic the behavior\nof `child_process.exec`\n\n- `opts.timeout`: number of milliseconds to wait for the program to complete before sending it\n`SIGTERM`.  Note that by default, your program will wait indefinitely for the\nspawned program to terminate.  Upon sending the fatal signal, `exec` will return\nwith whatever stdout and stderr was produced.\n- `opts.killSignal`: the signal to use when `opts.timeout` is used, defaults to `SIGTERM`\n- `opts.encoding`: the encoding to use for stdout and stderr.  **NOTE**: unlike `child_process.exec`, this defaults\nto `'utf-8'` if unset.  Set to `'buffer'` to handle binary data.\n\nInstallation\n------------\n\n    npm install exec\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/bahamas10/node-exec/issues"
  },
  "_id": "exec@0.1.2",
  "dist": {
    "shasum": "88047866a5ecea1f6ca6af7da86c7799d5ce69d9"
  },
  "_from": "exec@",
  "_resolved": "https://registry.npmjs.org/exec/-/exec-0.1.2.tgz"
}
