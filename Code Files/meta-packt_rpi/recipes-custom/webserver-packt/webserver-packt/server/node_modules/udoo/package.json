{
  "name": "udoo",
  "description": "UDOO GPIO abstraction library for Node.js & command line tool. (callback, promise, and synchronous styles supported)",
  "version": "0.2.0",
  "license": "MIT",
  "author": {
    "name": "Pilwon Huh",
    "email": "pilwon@gmail.com"
  },
  "homepage": "https://github.com/pilwon/node-udoo",
  "repository": {
    "type": "git",
    "url": "git://github.com/pilwon/node-udoo.git"
  },
  "keywords": [
    "udoo",
    "board",
    "gpio",
    "pin",
    "arduino",
    "due",
    "atmel",
    "cortex",
    "sam3x",
    "arm",
    "mx6",
    "freescale",
    "promise"
  ],
  "dependencies": {
    "async": "~0.2.9",
    "colors": "~0.6.2",
    "lodash": "~2.3.0",
    "q": "~0.9.7"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.2",
    "grunt-contrib-watch": "~0.5.3",
    "matchdep": "~0.3.0"
  },
  "bin": {
    "udoo": "./bin/udoo"
  },
  "scripts": {
    "prepublish": "npm prune"
  },
  "readme": "[![Logo](https://raw.github.com/pilwon/node-udoo/master/resource/udoo.png)](http://www.udoo.org/)\n\n[![NPM](https://nodei.co/npm/udoo.png?downloads=false&stars=false)](https://npmjs.org/package/udoo) [![NPM](https://nodei.co/npm-dl/udoo.png?months=6)](https://npmjs.org/package/udoo)\n\n\n`node-udoo` is a [UDOO](http://www.udoo.org/) [GPIO](https://www.kernel.org/doc/Documentation/gpio.txt) abstraction library for [Node.js](http://nodejs.org/) & [command line tool](#command-line-tool). All shared GPIO pinouts described in the [UDOO Pinout Diagram](https://raw.github.com/pilwon/node-udoo/master/resource/pinout-diagram.pdf) are supported.\n\nThis library provides user an option to develop UDOO apps on Node.js using asynchronous (both callback & promise styles) and synchronous patterns. However, it is strongly recommended to stick to Node.js' asynchronous (non-blocking I/O) style.\n\n\n## Demo Video\n\n[![Demo Video on YouTube](https://raw.github.com/pilwon/node-udoo/master/resource/youtube.png)](https://www.youtube.com/watch?v=tjS-Fe-7dDA)\n\n\n## Installation\n\n    $ npm install udoo\n\n* [Compiled Node.js and NPM binaries for Linaro Ubuntu can be found here.](https://github.com/pilwon/nodejs-for-linaro-ubuntu)\n\n\n## GPIOs Warnings\n\nPlease pay attention to the `GPIOs Warnings` section of the [UDOO Starting Manual](https://raw.github.com/pilwon/node-udoo/master/resource/manual.pdf):\n\n> When changing i.MX6 GPIOs directions, it is necessary to pay special attention. New direction must be compatible with SAM3x8E pinout configuration and/or with the load of the physical pin.\n\nIf you are not interacting with SAM3X (or you don't really understand what this is all about), just reset all shared pinouts to `INPUT` mode on `SAM3X` (`Arduino Due` microcontroller) using [this sketch file](https://github.com/pilwon/node-udoo/blob/master/resource/reset.pde) so you can move the potential direction conflict issue out of the way.\n\n\n## Usage\n\n[Blink](http://arduino.cc/en/Tutorial/Blink) example from [Arduino Tutorials](http://arduino.cc/en/Tutorial/HomePage) implemented in different styles:\n\n### Asynchronous Version w/ Callbacks\n\n```js\nvar udoo = require('udoo');\n\nvar led = udoo.outputPin(13),\n    on = false;\n\n(function loop() {\n  led.set(on = !on, function () {\n    setTimeout(loop, 1000);\n  });\n}());\n```\n\n### Asynchronous Version w/ [Promise (Q)](https://github.com/kriskowal/q)\n\n```js\nvar udoo = require('udoo');\n\nvar led = udoo.outputPin(13),\n    on = false;\n\n(function loop() {\n  led\n    .set(on = !on)\n    .done(function () {\n      setTimeout(loop, 1000);\n    });\n}());\n```\n\n### Asynchronous Version w/ [Async.js](https://github.com/caolan/async)\n\n```js\nvar udoo = require('udoo');\n\nvar led = udoo.outputPin(13),\n    on = false;\n\nudoo.async.forever(function (cb) {\n  udoo.async.series([\n    function (cb) {\n      led.set(on = !on, cb);\n    },\n    function (cb) {\n      setTimeout(cb, 1000);\n    }\n  ], cb);\n});\n```\n\n### Synchronous Version (not recommended)\n\n```js\nvar udoo = require('udoo');\n\nvar led = udoo.outputPin(13),\n    on = false;\n\n(function loop() {\n  led.setSync(on = !on);\n  setTimeout(loop, 1000);\n}());\n```\n\n* [See more comprehensive examples here.](https://github.com/pilwon/node-udoo/tree/master/examples)\n\n\n## API\n\n* `node-udoo` API provides all these patterns: **asynchronous style using callbacks**, **asynchronous style using promise**, and **synchronous style**.\n\n* You will be tempted to use synchronous style because the code looks simpler and easier, however it is not the recommended way to program in Node.js.\n\n* All asynchronous API functions accept callback as the last parameter. Whether you pass a callback function or not, they will always return a promise object built using [Q](https://github.com/kriskowal/q). You can do whatever you want with the returned promise, or stick with the traditional callback style.\n\n* Pin name can be any of key values in [PIN_MAPPING](https://github.com/pilwon/node-udoo/blob/master/lib/constant.js).\n\n```js\n// List all supported pinouts\n.gpioNumbers()\n.pinNames()\n\n// Create new pin\n.inputPin(pinName)\n.outputPin(pinName)\n\n// Pin getter/setter (append `Sync` for synchronous calls)\n.get(callback)              // Returns `true` for high/1, `false` for low/0\n.setHigh(callback)          // Sets true/high/1\n.setLow(callback)           // Sets false/low/0\n.set(value, callback)       // Sets (boolean) value\n\n// Pin mode (append `Sync` for synchronous calls)\n.getMode(callback)          // Returns one of `udoo.PIN_MODE.*`\n.setInputMode(callback)     // Change to input mode\n.setOutputMode(callback)    // Change to output mode\n\n// Reset (calling on `udoo` resets all pinouts to `INPUT` mode)\n.reset(callback)\n.resetSync()\n\n// Constants\n.PIN_MODE\n.PIN_MODE_INVERT\n\n// Libraries exported\n._                    // Lodash (underscore.js)\n.Q                    // Q (promise)\n.async                // Async.js\n```\n\n\n## Command Line Tool\n\n`node-udoo` comes with a convenient command line tool (`udoo`) for quick and easy control of UDOO GPIO pins. The command line tool can be installed using the following command:\n\n    $ sudo npm install udoo -g\n\n\n### Available Commands\n\n    $ udoo help\n    $ udoo high [<pinName> <pinName> ...]     # aliases: `udoo on`, `udoo 1`\n    $ udoo low [<pinName> <pinName> ...]      # aliases: `udoo off`, `udoo 0`\n    $ udoo reset [<pinName> <pinName> ...]\n    $ udoo blink [<pinName> <pinName> ...]\n\n\n## TODOs\n\nHere is a list of various ports need to be supported. Please contribute to the `node-udoo` project by sending [Pull Requests](https://help.github.com/articles/using-pull-requests).\n\n1. ~~GPIO (all 51 shared GPIO pinouts described in the [UDOO Pinout Diagram](https://raw.github.com/pilwon/node-udoo/master/resource/pinout-diagram.pdf))~~\n2. PWM\n3. SPI\n4. UARTs\n5. I2C\n6. Can Bus\n7. USB-OTG\n8. DAC\n9. JTAG\n10. DMA\n\n\n## Credits\n\n  See the [contributors](https://github.com/pilwon/node-udoo/graphs/contributors).\n\n\n## License\n\n<pre>\nThe MIT License (MIT)\n\nCopyright (c) 2013 Pilwon Huh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n</pre>\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/pilwon/node-udoo/issues"
  },
  "_id": "udoo@0.2.0",
  "_from": "udoo@"
}
